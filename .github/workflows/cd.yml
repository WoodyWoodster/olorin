name: CD

on:
  workflow_run:
    workflows: ["CI"]
    types: [completed]
    branches: [main]
  workflow_dispatch:

env:
  AWS_REGION: us-west-2
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-west-2.amazonaws.com

jobs:
  build-elessar:
    name: Build & Push Elessar
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch'
    defaults:
      run:
        working-directory: elessar

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push Elessar image
        env:
          ECR_REPOSITORY: olorin/elessar
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  build-celebrimbor:
    name: Build & Push Celebrimbor
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch'
    defaults:
      run:
        working-directory: celebrimbor

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push Celebrimbor image
        env:
          ECR_REPOSITORY: olorin/celebrimbor
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  migrate:
    name: Run Database Migrations
    runs-on: ubuntu-latest
    needs: [build-elessar]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get VPC configuration
        id: vpc-config
        run: |
          # Get private subnets
          SUBNETS=$(aws ec2 describe-subnets \
            --filters "Name=tag:Name,Values=olorin-private-*" \
            --query 'Subnets[*].SubnetId' \
            --output text \
            --region ${{ env.AWS_REGION }} | tr '\t' ',')

          # Get ECS tasks security group
          SG=$(aws ec2 describe-security-groups \
            --filters "Name=tag:Name,Values=olorin-ecs-tasks-sg" \
            --query 'SecurityGroups[0].GroupId' \
            --output text \
            --region ${{ env.AWS_REGION }})

          echo "subnets=$SUBNETS" >> $GITHUB_OUTPUT
          echo "security_group=$SG" >> $GITHUB_OUTPUT

      - name: Run migration task
        run: |
          echo "Running database migrations..."

          # Run the migration task
          TASK_ARN=$(aws ecs run-task \
            --cluster olorin-cluster \
            --task-definition olorin-elessar-migrate \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.vpc-config.outputs.subnets }}],securityGroups=[${{ steps.vpc-config.outputs.security_group }}],assignPublicIp=DISABLED}" \
            --region ${{ env.AWS_REGION }} \
            --query 'tasks[0].taskArn' \
            --output text)

          echo "Migration task started: $TASK_ARN"

          # Wait for task to complete
          aws ecs wait tasks-stopped \
            --cluster olorin-cluster \
            --tasks $TASK_ARN \
            --region ${{ env.AWS_REGION }}

          # Check exit code
          EXIT_CODE=$(aws ecs describe-tasks \
            --cluster olorin-cluster \
            --tasks $TASK_ARN \
            --region ${{ env.AWS_REGION }} \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)

          echo "Migration task exit code: $EXIT_CODE"

          if [ "$EXIT_CODE" != "0" ]; then
            echo "Migration failed! Check CloudWatch logs at /ecs/olorin-elessar with prefix 'migrate'"
            exit 1
          fi

          echo "Migrations completed successfully!"

  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    needs: [migrate, build-celebrimbor]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Force new deployment of Elessar service
        run: |
          aws ecs update-service \
            --cluster olorin-cluster \
            --service olorin-elessar \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}

      - name: Force new deployment of Celebrimbor service
        run: |
          aws ecs update-service \
            --cluster olorin-cluster \
            --service olorin-celebrimbor \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}

      - name: Wait for Elessar service stability
        run: |
          aws ecs wait services-stable \
            --cluster olorin-cluster \
            --services olorin-elessar \
            --region ${{ env.AWS_REGION }}

      - name: Wait for Celebrimbor service stability
        run: |
          aws ecs wait services-stable \
            --cluster olorin-cluster \
            --services olorin-celebrimbor \
            --region ${{ env.AWS_REGION }}
